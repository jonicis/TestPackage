<#@ assembly name="HtmlAgilityPack.dll" #>
<#@ import namespace="HtmlAgilityPack" #>

<#+

private static string GenerateToc(string topicContent)
{
	// Load the HTML document using HtmlAgilityPack
	HtmlDocument htmlSnippet = new HtmlDocument();
	htmlSnippet.LoadHtml(topicContent);
	
	// Retrieve the Toc's elements
	List<TocElement> tocTags = new List<TocElement>();
	tocTags = ExtractTocElements(htmlSnippet);
	
	return RenderToc(tocTags);
}
 
private static List<TocElement> ExtractTocElements(HtmlDocument htmlSnippet)
{
	List<TocElement> tocTags = new List<TocElement>();

	TocElement currentElement = null;
	int currentIndentLevel = 1;
	
	// Obtain all the Headings within the HTML
	foreach (HtmlNode headingElement in htmlSnippet.DocumentNode.SelectNodes("//h1 | //h2 | //h3 | //h4"))
	{
		// Obtain the previous element, if it's an anchor then is a valid toc element
		HtmlNode previousElement = GetPreviousElement(headingElement).ChildNodes.FirstOrDefault();
		if( previousElement != null )
		{
			if (previousElement.Name == "a")
			{
				TocElement tocElement = new TocElement()
				{
					AnchorReference = previousElement.Attributes["name"].Value,
					Text = headingElement.InnerText,
					IndentLevel = int.Parse(headingElement.Name.Substring(1)),
					Children = new List<TocElement>(),
					Parent = currentElement
				};
				
				if(tocElement.IndentLevel == 1)
				{
					tocTags.Add(tocElement);
				}
				else
				{
					if (tocElement.IndentLevel > currentIndentLevel)
					{				
						currentElement.Children.Add(tocElement);
					}				
					else if (tocElement.IndentLevel < currentIndentLevel)
					{
						while (tocElement.IndentLevel < currentIndentLevel )
						{
							currentElement = currentElement.Parent;
							currentIndentLevel = currentElement.IndentLevel;
						}
						
						if( tocElement.IndentLevel > currentIndentLevel)
						{
							tocElement.Parent = currentElement;
							currentElement.Children.Add(tocElement);
						}
						else
						{
							tocElement.Parent = currentElement.Parent;
							currentElement.Parent.Children.Add(tocElement);
						}
					}				
					else 
					{
							tocElement.Parent = currentElement.Parent;
							currentElement.Parent.Children.Add(tocElement);
					}				
				}
				
				currentElement = tocElement;				
				currentIndentLevel = tocElement.IndentLevel;				
			}
		}		
	}

	return tocTags;
}

private static HtmlNode GetPreviousElement(HtmlNode link)
{
	HtmlNode element = link.PreviousSibling;

	while (element.NodeType != HtmlNodeType.Element)
	{
		element = element.PreviousSibling;
	}

	return element;
}

private static string RenderToc(List<TocElement> tocTags )
{
	string tocContent = string.Empty;
	if (tocTags.Count() > 0)
	{
		tocContent += HttpUtility.HtmlEncode(string.Format("<ul class='tocLevel{0}'>", tocTags.First().IndentLevel));

		foreach (TocElement tocElement in tocTags)
		{
			tocContent += HttpUtility.HtmlEncode(string.Format("<li><a href='#{0}'>{1}</a></li>", tocElement.AnchorReference, tocElement.Text));

			if (tocElement.Children != null && tocElement.Children.Count() > 0)
			{
				tocContent += RenderToc(tocElement.Children);
			}
		}
		
		tocContent += HttpUtility.HtmlEncode("</ul>");    
	}

	return tocContent;
}

class TocElement
{
	public int IndentLevel { get; set; }

	public string AnchorReference { get; set; }

	public string Text { get; set; }
	
	public List<TocElement> Children { get; set; }
	
	public TocElement Parent { get; set; } 
}

#>